generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  // output = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int       @id @default(autoincrement())
  createdAt                  DateTime
  updatedAt                  DateTime?
  kakaoId                    BigInt    @unique
  kakaoAccessToken           String?   @unique
  kakaoAccessTokenExpiresOn  DateTime?
  kakaoRefreshToken          String?   @unique
  kakaoRefreshTokenExpiresOn DateTime?
  name                       String?
  Card                       Card[]
}

model Card {
  id                  Int               @id @default(autoincrement())
  uuid                String?           @unique @default(uuid())
  createdAt           DateTime
  updatedAt           DateTime?
  from                String
  to                  String
  msg                 String
  User                User?             @relation(fields: [userId], references: [id])
  userId              Int?
  Artwork             Artwork           @relation(fields: [artworkId], references: [id])
  artworkId           Int
  ArtworkBackground   ArtworkBackground @relation(fields: [artworkBackgroundId], references: [id])
  artworkBackgroundId Int
  ArtworkSnowFlake    ArtworkSnowFlake  @relation(fields: [artworkSnowFlakeId], references: [id])
  artworkSnowFlakeId  Int
}

model Artwork {
  id                Int                 @id @default(autoincrement())
  url               String
  Card              Card[]
  ArtworkBackground ArtworkBackground[]
  ArtworkSnowFlake  ArtworkSnowFlake[]
}

model ArtworkBackground {
  id      Int       @id @default(autoincrement())
  bgInfo  Json
  Card    Card[]
  Artwork Artwork[]
}

model ArtworkSnowFlake {
  id      Int       @id @default(autoincrement())
  imgUrls String[] /// snowflake imgs
  Card    Card[]
  Artwork Artwork[]
}
