service: 'cct-server-seoul'

frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-webpack-prisma
  - serverless-domain-manager
  - serverless-certificate-creator

package:
  patterns:
    - '!node_modules/.prisma/client/libquery_engine-*'
    - 'node_modules/.prisma/client/libquery_engine-rhel-*'
    - '!node_modules/prisma/libquery_engine-*'
    - '!node_modules/@prisma/engines/**'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'yarn'
    excludeFiles: src/**/*.test.js
    packagerOptions:
      scripts:
        - prisma generate
  domains:
    prod:
      domainName: api-prod-seoul.teamhh.link
      certificateName: api-prod-seoul.teamhh.link
  customCertificate:
    hostedZoneNames: "teamhh.link.seoul."
    certificateName: ${self:custom.domains.${self:provider.stage}.certificateName}
    region: ${self:provider.region}

  # Route53
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}.domainName}
    certificateName: ${self:custom.domains.${self:provider.stage}.certificateName}
    # Enable plugin to create an A Alias and AAAA Alias records in Route53
    # mapping the domainName to the generated distribution domain name.
    createRoute53Record: true
    createRoute53IPv6Record: true
    # Enable plugin to autorun create_domain/delete_domain as part of sls deploy/remove
    autoDomain: true
    endpointType: regional
    apiType: http

provider:
  name: aws
  stage: prod
  runtime: 'nodejs18.x'
  timeout: 10
  region: 'ap-northeast-2'
  stackName: cct-server-seoul-stack
  deploymentBucket:
    name: cct-server-seoul-bucket
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    DOMAIN: ${self:custom.customDomain.domainName}
    STAGE: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    KAKAO_REST_API_KEY: ${env:KAKAO_REST_API_KEY}
    DATABASE_URL: ${env:DATABASE_URL}
    CLIENT_URI_DEV: ${env:CLIENT_URI_DEV}
    CLIENT_URI_PROD: ${env:CLIENT_URI_PROD}
    SERVER_URI_DEV: ${env:SERVER_URI_DEV}
    SERVER_URI_PROD: ${env:SERVER_URI_PROD}
    APP_ACCESS_SECRET: ${env:APP_ACCESS_SECRET}
    APP_REFRESH_SECRET: ${env:APP_REFRESH_SECRET}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 's3:getObject'
          Resource: 'arn:aws:s3:::cct-server-seoul-bucket'
        - Effect: 'Allow'
          Action:
            - 'sts:AssumeRole'
          Resource: 'arn:aws:sts:::assumed-role/*'
  httpApi:
    cors:
      allowedOrigins:
        - 'http://localhost:5173'
        - 'https://localhost:5173'
        - 'https://hyodee-card.surge.sh'
        - 'https://card.teamhh.link'
      allowedMethods:
        - GET
        - OPTIONS
        - POST
        - PUT
        - DELETE
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - X-Transaction-Key
        - Range
        - baggage
        - sentry-trace
      allowCredentials: true
functions:
  api:
    handler: src/handler.handler
    events:
      - httpApi: '*'